// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
%#
%% if id in [1, 2, 3, 6] or target is stm32f0
%%	set uart = "Usart"
%% elif id in [4, 5, 7, 8]
%%	set uart = "Uart"
%% endif
%#
%% set name = uart ~ "Hal" ~ id
%% set peripheral = uart | upper ~ id
%#
%% if target is stm32l4
%%  set apb  = "APB1"
%%  set enr  = "ENR1"
%%  set rstr = "RSTR1"
%% else
%%  set apb  = "APB1"
%%  set enr  = "ENR"
%%  set rstr = "RSTR"
%% endif

#ifndef XPCC_STM32_UARTHAL_{{ id }}_HPP
#	error 	"Don't include this file directly, use" \
#			"'{{ uart | lower }}_hal_{{ id }}.hpp' instead!"
#endif

// ----------------------------------------------------------------------------
void
xpcc::stm32::{{ name }}::setParity(const Parity parity)
{
	uint32_t flags = {{ peripheral }}->CR1;
	flags &= ~(USART_CR1_PCE | USART_CR1_PS | USART_CR1_M);
	flags |= static_cast<uint32_t>(parity);
	if (parity != Parity::Disabled) {
		// Parity Bit counts as 9th bit -> enable 9 data bits
		flags |= USART_CR1_M;
	}
	{{ peripheral }}->CR1 = flags;
}

void
xpcc::stm32::{{ name }}::enable()
{
%% if id in [1, 6]
	// enable clock
	RCC->APB2ENR |= RCC_APB2ENR_{{ peripheral }}EN;
	// reset timer
	RCC->APB2RSTR |=  RCC_APB2RSTR_{{ peripheral }}RST;
	RCC->APB2RSTR &= ~RCC_APB2RSTR_{{ peripheral }}RST;
%% elif id in [2, 3, 4, 5, 7, 8]
	// FIXME: there seems to be a bug in the stm32f3xxlib which does not provide
	//        the necessary RCC_APB1ENR_UART5EN define and probably defines
	//        RCC_APB1ENR_UART4EN incorrectly (0x00100000 instead of 0x00080000)
	// enable clock
	RCC->{{ apb }}{{ enr }} |= RCC_{{ apb }}{{ enr }}_{{ peripheral }}EN;
	// reset uart
	RCC->{{ apb }}{{ rstr }} |=  RCC_{{ apb }}{{ rstr }}_{{ peripheral }}RST;
	RCC->{{ apb }}{{ rstr }} &= ~RCC_{{ apb }}{{ rstr }}_{{ peripheral }}RST;
%% endif
	{{ peripheral }}->CR1 |= USART_CR1_UE;		// Uart Enable
}

void
xpcc::stm32::{{ name }}::disable()
{
	// TX, RX, Uart, etc. Disable
	{{ peripheral }}->CR1 = 0;
%% if id in [1, 6]
	// disable clock
	RCC->APB2ENR &= ~RCC_APB2ENR_{{ peripheral }}EN;
%% elif id in [2, 3, 4, 5, 7, 8]
	// FIXME: there seems to be a bug in the stm32f3xxlib which does not provide
	//        the necessary RCC_APB1ENR_UART5EN define and probably defines
	//        RCC_APB1ENR_UART4EN incorrectly (0x00100000 instead of 0x00080000)
	// disable clock
	RCC->{{ apb }}{{ enr }} &= ~RCC_{{ apb }}{{ enr }}_{{ peripheral }}EN;
%% endif
}
%% if target is not stm32f1
template<class SystemClock, uint32_t baudrate,
		xpcc::stm32::{{ name }}::OversamplingMode oversample>
void xpcc_always_inline
xpcc::stm32::{{ name }}::initialize(Parity parity)
{
	initializeWithBrr(UartBaudrate::getBrr<SystemClock::{{ uart ~ id }}, baudrate>(),
			parity,
			oversample);
}
%% endif

template<class SystemClock, uint32_t baudrate>
void xpcc_always_inline
xpcc::stm32::{{ name }}::initialize(Parity parity)
{
%% if target is stm32f1
	initializeWithBrr(UartBaudrate::getBrr<SystemClock::{{ uart ~ id }}, baudrate>(), parity);
%% else
	initializeWithBrr(UartBaudrate::getBrr<SystemClock::{{ uart ~ id }}, baudrate>(), parity,
					  UartBaudrate::getOversamplingMode(SystemClock::{{ uart ~ id }}, baudrate));
%% endif
}


void inline
%% if target is not stm32f1
xpcc::stm32::{{ name }}::initializeWithBrr(uint16_t brr, Parity parity, OversamplingMode oversample)
%% else
xpcc::stm32::{{ name }}::initializeWithBrr(uint16_t brr, Parity parity)
%% endif
{
	enable();
	// DIRTY HACK: disable and reenable uart to be able to set
	//             baud rate as well as parity
	{{ peripheral }}->CR1 &= ~USART_CR1_UE;	// Uart Disable
	// set baudrate
	{{ peripheral }}->BRR = brr;
	setParity(parity);
%% if target is not stm32f1
	setOversamplingMode(oversample);
%% endif
	{{ peripheral }}->CR1 |=  USART_CR1_UE;	// Uart Reenable
}

%% if target is not stm32f1
void
xpcc::stm32::{{ name }}::setOversamplingMode(OversamplingMode mode)
{
	if(mode == OversamplingMode::By16) {
		{{ peripheral }}->CR1 &= ~static_cast<uint32_t>(OversamplingMode::By8);
	} else {
		{{ peripheral }}->CR1 |=  static_cast<uint32_t>(OversamplingMode::By8);
	}
}
%% endif
%% if id in [1, 2, 3, 6]

void
xpcc::stm32::{{ name }}::setSpiClock(SpiClock clk)
{
	if(clk == SpiClock::Disabled) {
		{{ peripheral }}->CR2 &= ~static_cast<uint32_t>(SpiClock::Enabled);
	} else {
		{{ peripheral }}->CR2 |=  static_cast<uint32_t>(SpiClock::Enabled);
	}
}

void
xpcc::stm32::{{ name }}::setSpiDataMode(SpiDataMode mode)
{
	{{ peripheral }}->CR2 =
		({{ peripheral }}->CR2 & ~static_cast<uint32_t>(SpiDataMode::Mode3))
		| static_cast<uint32_t>(mode);
}

void
xpcc::stm32::{{ name }}::setLastBitClockPulse(LastBitClockPulse pulse)
{
	if(pulse == LastBitClockPulse::DoNotOutput) {
		{{ peripheral }}->CR2 &= ~static_cast<uint32_t>(LastBitClockPulse::Output);
	} else {
		{{ peripheral }}->CR2 |=  static_cast<uint32_t>(LastBitClockPulse::Output);
	}
}
%% endif

void
xpcc::stm32::{{ name }}::write(uint8_t data)
{
%% if target is stm32f0 or target is stm32f3 or target is stm32l4 or target is stm32f7
	{{ peripheral }}->TDR = data;
%% else
	{{ peripheral }}->DR = data;
%% endif
}

void
xpcc::stm32::{{ name }}::read(uint8_t &data)
{
%% if target is stm32f0 or target is stm32f3 or target is stm32l4 or target is stm32f7
	data = {{ peripheral }}->RDR;
%% else
	data = {{ peripheral }}->DR;
%% endif
}

void
xpcc::stm32::{{ name }}::setTransmitterEnable(const bool enable)
{
	if (enable) {
		{{ peripheral }}->CR1 |=  USART_CR1_TE;
	} else {
		{{ peripheral }}->CR1 &= ~USART_CR1_TE;
	}
}

void
xpcc::stm32::{{ name }}::setReceiverEnable(bool enable)
{
	if (enable) {
		{{ peripheral }}->CR1 |=  USART_CR1_RE;
	} else {
		{{ peripheral }}->CR1 &= ~USART_CR1_RE;
	}
}

bool
xpcc::stm32::{{ name }}::isReceiveRegisterNotEmpty()
{
%% if target is stm32f0 or target is stm32f3 or target is stm32l4 or target is stm32f7
	return {{ peripheral }}->ISR & USART_ISR_RXNE;
%% else
	return {{ peripheral }}->SR & USART_SR_RXNE;
%% endif
}

bool
xpcc::stm32::{{ name }}::isTransmitRegisterEmpty()
{
%% if target is stm32f0 or target is stm32f3 or target is stm32l4 or target is stm32f7
	return {{ peripheral }}->ISR & USART_ISR_TXE;
%% else
	return {{ peripheral }}->SR & USART_SR_TXE;
%% endif
}

void
xpcc::stm32::{{ name }}::enableInterruptVector(bool enable, uint32_t priority)
{
%% if target is stm32f0 and id in [3,4]
	%%set irq = "USART3_4"
%% else
	%% set irq = peripheral
%% endif
	if (enable) {
		// Set priority for the interrupt vector
		NVIC_SetPriority({{ irq }}_IRQn, priority);

		// register IRQ at the NVIC
		NVIC_EnableIRQ({{ irq }}_IRQn);
	}
	else {
		NVIC_DisableIRQ({{ irq }}_IRQn);
	}
}

void
xpcc::stm32::{{ name }}::enableInterrupt(Interrupt_t interrupt)
{
	{{ peripheral }}->CR1 |= interrupt.value;
}

void
xpcc::stm32::{{ name }}::disableInterrupt(Interrupt_t interrupt)
{
	{{ peripheral }}->CR1 &= ~interrupt.value;
}

xpcc::stm32::{{ name }}::InterruptFlag_t
xpcc::stm32::{{ name }}::getInterruptFlags()
{
%% if target is stm32f0 or target is stm32f3 or target is stm32l4 or target is stm32f7
	return InterruptFlag_t( {{ peripheral }}->ISR );
%% else
	return InterruptFlag_t( {{ peripheral }}->SR );
%% endif
}

void
xpcc::stm32::{{ name }}::acknowledgeInterruptFlags(InterruptFlag_t flags)
{
%% if target is stm32f0 or target is stm32f3 or target is stm32l4 or target is stm32f7
	// Not all flags can be cleared by writing to this reg
	const uint32_t mask = USART_ICR_PECF  | USART_ICR_FECF   |
		USART_ICR_NCF   | USART_ICR_ORECF | USART_ICR_IDLECF |
		USART_ICR_TCCF  | USART_ICR_CTSCF | USART_ICR_RTOCF  |
		USART_ICR_CMCF
#ifdef USART_ICR_LBDCF // F0x0 do not have LIN mode!
		| USART_ICR_LBDCF
#endif
#ifdef USART_ICR_EOBCF // F0x0 do not have Smartcard mode!
		| USART_ICR_EOBCF
#endif
#ifdef USART_ICR_WUCF
		| USART_ICR_WUCF
#endif
		;
	// Flags are cleared by writing a one to the flag position.
	// Writing a zero is (hopefully) ignored.
	{{ peripheral }}->ICR = (flags.value & mask);
%% else
	/* Interrupts must be cleared manually by accessing SR and DR.
	 * Overrun Interrupt, Noise flag detected, Framing Error, Parity Error
	 * p779: "It is cleared by a software sequence (an read to the
	 * USART_SR register followed by a read to the USART_DR register"
	 */
	if (flags & InterruptFlag::OverrunError) {
		uint32_t tmp;
		tmp = {{ peripheral }}->SR;
		tmp = {{ peripheral }}->DR;
		(void) tmp;
	}
	(void) flags;	// avoid compiler warning
%% endif
}
